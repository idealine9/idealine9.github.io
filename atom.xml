<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ideal recode</title>
  
  <subtitle>We just skip that proof.</subtitle>
  <link href="https://idealine9.github.io/atom.xml" rel="self"/>
  
  <link href="https://idealine9.github.io/"/>
  <updated>2023-08-14T13:06:48.091Z</updated>
  <id>https://idealine9.github.io/</id>
  
  <author>
    <name>idealine9</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://idealine9.github.io/posts/undefined/"/>
    <id>https://idealine9.github.io/posts/undefined/</id>
    <published>2023-08-18T08:25:40.984Z</published>
    <updated>2023-08-14T13:06:48.091Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h2><h3 id="Cauchy-Schwarz-Inequality"><a href="#Cauchy-Schwarz-Inequality" class="headerlink" title="Cauchy-Schwarz Inequality"></a>Cauchy-Schwarz Inequality</h3><p>For all sequences of real numbers $a_i$ and $b_i$ ,we have<br>$$<br>\bigg(\sum_{i&#x3D;1}^n {a_i}^2 \bigg) \bigg(\sum_{i&#x3D;1}^n {b_i}^2 \bigg) \ge \bigg(\sum_{i&#x3D;1}^n {a_i}{b_i} \bigg)^2<br>$$</p><h2 id="Number-theory"><a href="#Number-theory" class="headerlink" title="Number theory"></a>Number theory</h2><h3 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h3><p>又称贝祖定理 (Bézout’s lemma)。是一个关于最大公约数的定理。</p><ul><li>设 $a,b$ 是不全为0的整数，则存在整数 $x,y$ ，使得 $ax+by&#x3D;gcd(a,b)$</li></ul><blockquote><p>推论：如果 $a$ 与 $b$ 互素，则存在整数 $x,y$ ，使得 $ax+by&#x3D;1$</p></blockquote><h3 id="欧拉函数与欧拉定理"><a href="#欧拉函数与欧拉定理" class="headerlink" title="欧拉函数与欧拉定理"></a>欧拉函数与欧拉定理</h3><p>欧拉函数 (Euler’s totient function)</p><ul><li>${\varphi}(n)$ ，表示小于等于 $n$ 和 $n$ 互质数的个数。</li></ul><blockquote><p>当 n 为质数的时候，显然有 φ(n)&#x3D;n−1 ，特别的，当 n 为奇数时，φ(2n)&#x3D;φ(n)</p></blockquote><blockquote><p>欧拉函数是积性函数，即如果有 $gcd(a,b)&#x3D;1$ ，那么有 $\varphi(a×b)&#x3D;\varphi(a)×\varphi(b)$</p></blockquote><p>欧拉定理 (Euler’s Theorem)</p><ul><li>若 $gcd(a,n)&#x3D;1$ ，则 $a^{\varphi(n)} \equiv 1 \ (\bmod n)$</li></ul><h2 id="Group-theory-MCS"><a href="#Group-theory-MCS" class="headerlink" title="Group theory (MCS)"></a>Group theory (MCS)</h2><h3 id="10-1-Vertex-Degrees"><a href="#10-1-Vertex-Degrees" class="headerlink" title="10.1 Vertex Degrees"></a>10.1 Vertex Degrees</h3><p>The $in {-} degree \ (d^-)$ is the number of arrows coming into it ( <em>number of times the vertex is pointed</em> ),</p><p>similarly, the $out{-}degree \ (d^+)$ is the number of arrows out of it ( <em>number of points to other vertices</em> ).</p><p>If $G$ is a digraph and $v \in V(G)$ , then<br>$$<br>\sum_{v \ \in \ V(G)} d^+(v) &#x3D; \sum_{v \ \in \ V(G)} d^-(v)<br>$$<br>and both sums are equal to $\vert E(G) \vert$</p><h3 id="10-2-Walks-and-Paths"><a href="#10-2-Walks-and-Paths" class="headerlink" title="10.2 Walks and Paths"></a>10.2 Walks and Paths</h3><blockquote><p>  <strong>Definition</strong>.</p><p>  <strong>$walk$</strong> : A  $walk$  in a digraph is an alternating sequence of vertices and edges that begins with a vertex and ends with a vertex.</p><p>  <strong>$closed \ walk$</strong> : A  $closed \ walk$  is a  $walk$  that begins and ends at the same vertex.</p><p>  <strong>$path$</strong> : The $walk$ is a $path$ iff all the vertices are different.</p><p>  <strong>$cycle$</strong> : A $cycle$ is a positive length $path$ and begins and ends at the same vertex.</p></blockquote><blockquote><p>  <strong>Lemma</strong>. [ The Triangle Inequality ]</p></blockquote><p>$$<br>dist(u,v) \le dist(u,x)+dist(x,v)<br>$$</p><p>for all vertices $u,\ v, \ x$ with equality holding if and only if x is on a shortest path from $u$ to $v$. </p><h3 id="10-3-Adjacency-Matrices"><a href="#10-3-Adjacency-Matrices" class="headerlink" title="10.3 Adjacency Matrices"></a>10.3 Adjacency Matrices</h3><p>If a graph $G$ has $n$ vertices $v_0, \ v_1 \ … \ v_{n-1}$ , a useful way to represent it is with an $n \times n$ matrix of zeros and ones called its <em><strong>adjacency matrices</strong></em> $A_G$.</p><p>$(A_G)<em>{ij}$  is  $1$  if there is an edge from vertex  $v_i$  to vertex  $v_j$  and  $0$  otherwise.<br>$$<br>(A_G)</em>{ij}&#x3D;<br>\begin{cases}<br>1 &amp; if \ \langle v_i \to v_j \rangle \in E(G),<br>\<br>0 &amp; otherwise,<br>\end{cases}<br>$$</p><p>Let $H$ be the 4-node graph. Its adjacency matrix  $A_H$  is the 4 $\times$ 4 matrix :<br>$$<br>A_H \ &#x3D; \ \ \<br>\begin{array}{c | c  c  c}<br>&amp; a &amp; b &amp; c &amp; d \<br>\hline<br>a &amp; 0 &amp; 1 &amp; 0 &amp; 1 \<br>b &amp; 0 &amp; 0 &amp; 1 &amp; 1 \<br>c &amp; 0 &amp; 1 &amp; 0 &amp; 0 \<br>d &amp; 0 &amp; 0 &amp; 1 &amp; 0 \<br>\end{array}<br>$$<br>We can use matrix powers to count numbers of walks between vertices. For example, if we want to know the walk with a length of $2$, we could have read these counts from the entires in the matrix $(A_H)^2$ :<br>$$<br>(A_H)^2 \ &#x3D; \ \ \<br>\begin{array}{c | c  c  c}<br>&amp; a &amp; b &amp; c &amp; d \<br>\hline<br>a &amp; 0 &amp; 0 &amp; 2 &amp; 1 \<br>b &amp; 0 &amp; 1 &amp; 1 &amp; 0 \<br>c &amp; 0 &amp; 0 &amp; 1 &amp; 1 \<br>d &amp; 0 &amp; 1 &amp; 0 &amp; 0 \<br>\end{array}<br>$$<br>More generally, the matrix $(A_G)^k$ provides a count of the number of length $k$ walks between vertices in any digraph $G$.</p><blockquote><p>  <strong>Theorem</strong>. For a digraph $G$, if $C$ is the <em>length-m walk counting matrix</em> and $D$ is the <em>length-n walk counting matrix</em>, then $CD$ is the <em>length k+m walk counting matrix</em> for $G$.</p></blockquote><blockquote><p>  <strong>Corollary</strong>. The <em>length-k counting matrix of a digraph</em> $G$ is $(A_G)^k$ , for all  $k\in$ $\mathbb{N}$.</p></blockquote><p>In other words, you can determine the number of <em>length $k$ walks</em> between any pair of vertices simply by computing the $k$ th power of the <em>adjacency matrix</em>.</p><h4 id="10-3-1-Shortest-Path"><a href="#10-3-1-Shortest-Path" class="headerlink" title="10.3.1 Shortest Path"></a>10.3.1 Shortest Path</h4><p>To find the lengths of all the shortest paths in an <em>n-vertex</em> graph $G$ is to compute the successive powers of $A_G$ one by one up to the $n-1$ times, watching for the first power at which each entry becomes positive. </p><p>The distance from $u$ to $v$ will be the smallest value $k$ for which  $(A_G)^K_{uv}$  is nonzero, and if there is a shortest path, its length will be $\le n-1$ . The methods apply as well to <em>weighted graphs</em>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;数学&quot;&gt;&lt;a href=&quot;#数学&quot; class=&quot;headerlink&quot; title=&quot;数学&quot;&gt;&lt;/a&gt;数学&lt;/h1&gt;&lt;h2 id=&quot;Algebra&quot;&gt;&lt;a href=&quot;#Algebra&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode_455</title>
    <link href="https://idealine9.github.io/posts/LeetCode_445/"/>
    <id>https://idealine9.github.io/posts/LeetCode_445/</id>
    <published>2023-06-03T11:18:24.452Z</published>
    <updated>2023-06-04T02:43:42.902Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode_455.分发饼干<br>原题链接：<a href="https://leetcode.cn/problems/assign-cookies/">https://leetcode.cn/problems/assign-cookies/</a></p><span id="more"></span><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>数组g中有i个元素，每个元素的大小g[i]，数组s中有j个元素，每个元素的大小为s[j]，若s[j]&gt;&#x3D;g[i]，则满足数+1，求最大满足数。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>由于题目不需要考虑饼干是否存在浪费，故可以采用贪心的思路，从最小开始比较。</p></blockquote><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>将数组g和数组s都从大到小排好序，都从最小开始，逐个比较。</p><p>若数组s的该元素小于数组g的该元素，则找数组s的下一个元素再比较，</p><p>若数组s的该元素大于等于数组g的该元素，则两数组索引都+1，以上述同样的方法比较接下来的元素大小，满足数+1，返回满足数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());                             <span class="comment">//数组g，s排序</span></span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;                  </span><br><span class="line">            <span class="keyword">if</span> (j &lt; g.<span class="built_in">size</span>() &amp;&amp; g[j] &lt;= s[i]) &#123;               <span class="comment">//这里其实cnt可以代替j工作</span></span><br><span class="line">                j++;                                          <span class="comment">//为了与思路对应就加了j变量</span></span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode_455.分发饼干&lt;br&gt;原题链接：&lt;a href=&quot;https://leetcode.cn/problems/assign-cookies/&quot;&gt;https://leetcode.cn/problems/assign-cookies/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode题解" scheme="https://idealine9.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://idealine9.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_59</title>
    <link href="https://idealine9.github.io/posts/LeetCode_59/"/>
    <id>https://idealine9.github.io/posts/LeetCode_59/</id>
    <published>2023-06-03T11:18:24.452Z</published>
    <updated>2023-06-04T02:43:38.756Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode_59.螺旋矩阵II<br>数学题,找数学规律<br>原题链接：<a href="https://leetcode.cn/problems/spiral-matrix-ii/">https://leetcode.cn/problems/spiral-matrix-ii/</a></p><span id="more"></span><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个正整数n，生成包含1到n²的n阶方阵，且元素在方阵中按顺时针顺序螺旋排列。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>  既然是方阵，那肯定用数学的思维去看待的话会有所发现。</p></blockquote><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>每一行，列的个数为n，我们将每n-1个数作为一个整体，取名”填充区“</p><p>以行-&gt;列-&gt;行-&gt;列的顺时针循环顺序一直取填充区，当n&gt;&#x3D;2的时候，方阵最外圈总能取到4个填充区</p><p>每取完一圈，下一圈的填充区的元素个数会减少2个（原因是上一圈的填充区占用了两个元素）</p><p>若n为偶数，则所有的元素都会在各自所在圈数的填充区里（最后一圈的填充区长度为1，即元素自身）</p><p>若n为奇数，则会单独剩下中心元素。</p><p>故当我们将方阵分块后，便能轻松知晓每一圈什么时候结束循环，什么时候开始循环。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">arr</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));    <span class="comment">//定义二维数组</span></span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,val=<span class="number">1</span>;                                <span class="comment">//x为行数，y为列数，val为值</span></span><br><span class="line">        <span class="type">int</span> circle=n/<span class="number">2</span>;                                   <span class="comment">//circle为需要填充的圈数</span></span><br><span class="line">        <span class="type">int</span> ifcenter=n%<span class="number">2</span>;                                 <span class="comment">//用于判断是否存在中心元素</span></span><br><span class="line">        <span class="type">int</span> circled=<span class="number">0</span>;                                    <span class="comment">//计数已经填充的圈数</span></span><br><span class="line">        <span class="keyword">while</span>(circled&lt;=circle)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从左到右赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                y++;                                      <span class="comment">//y为列数，自增即代表向右移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从上到下赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                x++;                                      <span class="comment">//x为行数，自增即代表向下移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从右到左赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                y--;                                      <span class="comment">//y为列数，自减即代表向左移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从下到上赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                x--;                                      <span class="comment">//x为行数，自减即代表向上移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            x++;                                          <span class="comment">//每走完一圈，起始行数+1</span></span><br><span class="line">            y++;                                          <span class="comment">//每走完一圈，起始列数+1</span></span><br><span class="line">            circled++;                                    <span class="comment">//每走完一圈，已经填充的圈数+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ifcenter!=<span class="number">0</span>)&#123;                                  <span class="comment">//中心元素的判断</span></span><br><span class="line">            arr[n/<span class="number">2</span>][n/<span class="number">2</span>]=n*n;                            <span class="comment">//若存在中心元素，值即等于n*n</span></span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码的额外补充说明"><a href="#代码的额外补充说明" class="headerlink" title="代码的额外补充说明"></a>代码的额外补充说明</h3><p>x为行数，y为列数，初始赋值为0，即从二维数组的第一项开始</p><p>之后每次自增，即从方阵对角线上的当前值到下一个值，以对角线上前半个值为填充的起始点</p><p>for循环中i的判断条件来由可在具体思路中寻得。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode_59.螺旋矩阵II&lt;br&gt;数学题,找数学规律&lt;br&gt;原题链接：&lt;a href=&quot;https://leetcode.cn/problems/spiral-matrix-ii/&quot;&gt;https://leetcode.cn/problems/spiral-matrix-ii/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode题解" scheme="https://idealine9.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://idealine9.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
