<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ideal recode</title>
  
  <subtitle>We just skip that proof.</subtitle>
  <link href="https://idealine9.github.io/atom.xml" rel="self"/>
  
  <link href="https://idealine9.github.io/"/>
  <updated>2023-08-28T13:17:05.254Z</updated>
  <id>https://idealine9.github.io/</id>
  
  <author>
    <name>idealine9</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Group theory</title>
    <link href="https://idealine9.github.io/posts/Group-Theory/"/>
    <id>https://idealine9.github.io/posts/Group-Theory/</id>
    <published>2023-08-22T03:03:20.441Z</published>
    <updated>2023-08-28T13:17:05.254Z</updated>
    
    <content type="html"><![CDATA[<p>MCS的一点阅读笔记 <span id="more"></span></p><h3 id="vertex-degrees">10.1 Vertex Degrees</h3><p>The <span class="math inline">\(in {-} degree \ (d^-)\)</span> is thenumber of arrows coming into it ( <em>number of times the vertex ispointed</em> ),</p><p>similarly, the <span class="math inline">\(out{-}degree \(d^+)\)</span> is the number of arrows out of it ( <em>number of pointsto other vertices</em> ).</p><p>If <span class="math inline">\(G\)</span> is a digraph and <spanclass="math inline">\(v \in V(G)\)</span> , then <spanclass="math display">\[\sum_{v \ \in \ V(G)} d^+(v) = \sum_{v \ \in \ V(G)} d^-(v)\]</span> and both sums are equal to <span class="math inline">\(\vertE(G) \vert\)</span></p><h3 id="walks-and-paths">10.2 Walks and Paths</h3><blockquote><p><strong>Definition</strong>.</p><p><strong><span class="math inline">\(walk\)</span></strong> : A <spanclass="math inline">\(walk\)</span> in a digraph is an alternatingsequence of vertices and edges that begins with a vertex and ends with avertex.</p><p><strong><span class="math inline">\(closed \ walk\)</span></strong> :A <span class="math inline">\(closed \ walk\)</span> is a <spanclass="math inline">\(walk\)</span> that begins and ends at the samevertex.</p><p><strong><span class="math inline">\(path\)</span></strong> : The<span class="math inline">\(walk\)</span> is a <spanclass="math inline">\(path\)</span> iff all the vertices aredifferent.</p><p><strong><span class="math inline">\(cycle\)</span></strong> : A <spanclass="math inline">\(cycle\)</span> is a positive length <spanclass="math inline">\(path\)</span> and begins and ends at the samevertex.</p></blockquote><blockquote><p><strong>Lemma</strong>. [ The Triangle Inequality ]</p></blockquote><p><span class="math display">\[dist(u,v) \le dist(u,x)+dist(x,v)\]</span></p><p>for all vertices <span class="math inline">\(u,\ v, \ x\)</span> withequality holding if and only if x is on a shortest path from <spanclass="math inline">\(u\)</span> to <spanclass="math inline">\(v\)</span>.</p><h3 id="adjacency-matrices">10.3 Adjacency Matrices</h3><p>If a graph <span class="math inline">\(G\)</span> has <spanclass="math inline">\(n\)</span> vertices <spanclass="math inline">\(v_0, \ v_1 \ ... \ v_{n-1}\)</span> , a useful wayto represent it is with an <span class="math inline">\(n \timesn\)</span> matrix of zeros and ones called its <strong><em>adjacencymatrices</em></strong> <span class="math inline">\(A_G\)</span>.</p><p><span class="math inline">\((A_G)_{ij}\)</span> is <spanclass="math inline">\(1\)</span> if there is an edge from vertex <spanclass="math inline">\(v_i\)</span> to vertex <spanclass="math inline">\(v_j\)</span> and <spanclass="math inline">\(0\)</span> otherwise. <spanclass="math display">\[(A_G)_{ij}=\begin{cases}1 &amp; if \ \langle v_i \to v_j \rangle \in E(G),\\0 &amp; otherwise,\end{cases}\]</span></p><p>Let <span class="math inline">\(H\)</span> be the 4-node graph. Itsadjacency matrix <span class="math inline">\(A_H\)</span> is the 4 <spanclass="math inline">\(\times\)</span> 4 matrix : <spanclass="math display">\[A_H \ = \ \ \\begin{array}{}&amp; a &amp; b &amp; c &amp; d \\a &amp; 0 &amp; 1 &amp; 0 &amp; 1 \\b &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\c &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\d &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\end{array}\]</span> We can use matrix powers to count numbers of walks betweenvertices. For example, if we want to know the walk with a length of<span class="math inline">\(2\)</span>, we could have read these countsfrom the entires in the matrix <spanclass="math inline">\((A_H)^2\)</span> : <span class="math display">\[(A_H)^2 \ = \ \ \\begin{array}{}&amp; a &amp; b &amp; c &amp; d \\a &amp; 0 &amp; 0 &amp; 2 &amp; 1 \\b &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\c &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\d &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\\end{array}\]</span> More generally, the matrix <spanclass="math inline">\((A_G)^k\)</span> provides a count of the number oflength <span class="math inline">\(k\)</span> walks between vertices inany digraph <span class="math inline">\(G\)</span>.</p><blockquote><p><strong>Theorem</strong>. For a digraph <spanclass="math inline">\(G\)</span>, if <spanclass="math inline">\(C\)</span> is the <em>length-m walk countingmatrix</em> and <span class="math inline">\(D\)</span> is the<em>length-n walk counting matrix</em>, then <spanclass="math inline">\(CD\)</span> is the <em>length k+m walk countingmatrix</em> for <span class="math inline">\(G\)</span>.</p></blockquote><blockquote><p><strong>Corollary</strong>. The <em>length-k counting matrix of adigraph</em> <span class="math inline">\(G\)</span> is <spanclass="math inline">\((A_G)^k\)</span> , for all <spanclass="math inline">\(k\in\)</span> <spanclass="math inline">\(\mathbb{N}\)</span>.</p></blockquote><p>In other words, you can determine the number of <em>length <spanclass="math inline">\(k\)</span> walks</em> between any pair of verticessimply by computing the <span class="math inline">\(k\)</span> th powerof the <em>adjacency matrix</em>.</p><h4 id="shortest-path">10.3.1 Shortest Path</h4><p>To find the lengths of all the shortest paths in an <em>n-vertex</em>graph <span class="math inline">\(G\)</span> is to compute thesuccessive powers of <span class="math inline">\(A_G\)</span> one by oneup to the <span class="math inline">\(n-1\)</span> times, watching forthe first power at which each entry becomes positive.</p><p>The distance from <span class="math inline">\(u\)</span> to <spanclass="math inline">\(v\)</span> will be the smallest value <spanclass="math inline">\(k\)</span> for which <spanclass="math inline">\((A_G)^K_{uv}\)</span> is nonzero, and if there isa shortest path, its length will be <span class="math inline">\(\len-1\)</span> . The methods apply as well to <em>weightedgraphs</em>.</p><h3 id="walks-relations">10.4 Walks Relations</h3><p>For any digraph <span class="math inline">\(G\)</span>, a binaryrelation <span class="math inline">\(G^*\)</span>, called the walkrelation on <span class="math inline">\(V(G)\)</span>, where <spanclass="math display">\[u \ G^* \ v ::= \textnormal{there is a walk in $G$ from $u$ to $v$}\]</span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MCS的一点阅读笔记</summary>
    
    
    
    <category term="数学笔记" scheme="https://idealine9.github.io/categories/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数学" scheme="https://idealine9.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_455</title>
    <link href="https://idealine9.github.io/posts/LeetCode_445/"/>
    <id>https://idealine9.github.io/posts/LeetCode_445/</id>
    <published>2023-06-03T11:18:24.452Z</published>
    <updated>2023-06-04T02:43:42.902Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode_455.分发饼干原题链接：https://leetcode.cn/problems/assign-cookies/ <span id="more"></span></p><h2 id="题目大意">题目大意</h2><p>数组g中有i个元素，每个元素的大小g[i]，数组s中有j个元素，每个元素的大小为s[j]，若s[j]&gt;=g[i]，则满足数+1，求最大满足数。</p><h2 id="思路">思路</h2><blockquote><p>由于题目不需要考虑饼干是否存在浪费，故可以采用贪心的思路，从最小开始比较。</p></blockquote><h3 id="具体思路">具体思路</h3><p>将数组g和数组s都从大到小排好序，都从最小开始，逐个比较。</p><p>若数组s的该元素小于数组g的该元素，则找数组s的下一个元素再比较，</p><p>若数组s的该元素大于等于数组g的该元素，则两数组索引都+1，以上述同样的方法比较接下来的元素大小，满足数+1，返回满足数。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g, vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());                             <span class="comment">//数组g，s排序</span></span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;                  </span><br><span class="line">            <span class="keyword">if</span> (j &lt; g.<span class="built_in">size</span>() &amp;&amp; g[j] &lt;= s[i]) &#123;               <span class="comment">//这里其实cnt可以代替j工作</span></span><br><span class="line">                j++;                                          <span class="comment">//为了与思路对应就加了j变量</span></span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode_455.分发饼干
原题链接：https://leetcode.cn/problems/assign-cookies/</summary>
    
    
    
    <category term="LeetCode题解" scheme="https://idealine9.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://idealine9.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_59</title>
    <link href="https://idealine9.github.io/posts/LeetCode_59/"/>
    <id>https://idealine9.github.io/posts/LeetCode_59/</id>
    <published>2023-06-03T11:18:24.452Z</published>
    <updated>2023-08-22T03:02:27.744Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode_59.螺旋矩阵II 数学题,找数学规律原题链接：https://leetcode.cn/problems/spiral-matrix-ii/ <span id="more"></span></p><h2 id="题目大意">题目大意</h2><p>给你一个正整数n，生成包含1到n²的n阶方阵，且元素在方阵中按顺时针顺序螺旋排列。</p><h2 id="思路">思路</h2><blockquote><p>既然是方阵，那肯定用数学的思维去看待的话会有所发现。</p></blockquote><h3 id="具体思路">具体思路</h3><p>每一行，列的个数为n，我们将每n-1个数作为一个整体，取名”填充区“</p><p>以行-&gt;列-&gt;行-&gt;列的顺时针循环顺序一直取填充区，当n&gt;=2的时候，方阵最外圈总能取到4个填充区</p><p>每取完一圈，下一圈的填充区的元素个数会减少2个（原因是上一圈的填充区占用了两个元素）</p><p>若n为偶数，则所有的元素都会在各自所在圈数的填充区里（最后一圈的填充区长度为1，即元素自身）</p><p>若n为奇数，则会单独剩下中心元素。</p><p>故当我们将方阵分块后，便能轻松知晓每一圈什么时候结束循环，什么时候开始循环。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">arr</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));    <span class="comment">//定义二维数组</span></span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,val=<span class="number">1</span>;                                <span class="comment">//x为行数，y为列数，val为值</span></span><br><span class="line">        <span class="type">int</span> circle=n/<span class="number">2</span>;                                   <span class="comment">//circle为需要填充的圈数</span></span><br><span class="line">        <span class="type">int</span> ifcenter=n%<span class="number">2</span>;                                 <span class="comment">//用于判断是否存在中心元素</span></span><br><span class="line">        <span class="type">int</span> circled=<span class="number">0</span>;                                    <span class="comment">//计数已经填充的圈数</span></span><br><span class="line">        <span class="keyword">while</span>(circled&lt;=circle)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从左到右赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                y++;                                      <span class="comment">//y为列数，自增即代表向右移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从上到下赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                x++;                                      <span class="comment">//x为行数，自增即代表向下移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从右到左赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                y--;                                      <span class="comment">//y为列数，自减即代表向左移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-circled*<span class="number">2</span>;i++)&#123;             <span class="comment">//从下到上赋值</span></span><br><span class="line">                arr[x][y]=val++;</span><br><span class="line">                x--;                                      <span class="comment">//x为行数，自减即代表向上移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            x++;                                          <span class="comment">//每走完一圈，起始行数+1</span></span><br><span class="line">            y++;                                          <span class="comment">//每走完一圈，起始列数+1</span></span><br><span class="line">            circled++;                                    <span class="comment">//每走完一圈，已经填充的圈数+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ifcenter!=<span class="number">0</span>)&#123;                                  <span class="comment">//中心元素的判断</span></span><br><span class="line">            arr[n/<span class="number">2</span>][n/<span class="number">2</span>]=n*n;                            <span class="comment">//若存在中心元素，值即等于n*n</span></span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码的额外补充说明">代码的额外补充说明</h3><p>x为行数，y为列数，初始赋值为0，即从二维数组的第一项开始</p><p>之后每次自增，即从方阵对角线上的当前值到下一个值，以对角线上前半个值为填充的起始点</p><p>for循环中i的判断条件来由可在具体思路中寻得。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode_59.螺旋矩阵II 数学题,找数学规律
原题链接：https://leetcode.cn/problems/spiral-matrix-ii/</summary>
    
    
    
    <category term="LeetCode题解" scheme="https://idealine9.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://idealine9.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
